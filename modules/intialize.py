def load_file(file_path):
    with open(file_path, 'r') as file:
        data = file.read()
    return data

# Seperates individual nodes from the content (nodes are in between Begin Object and End Object)
def seperate_nodes(content):
    nodes = []
    in_object = False
    current_object = []

    for line in content.splitlines():
        if "Begin Object" in line:
            in_object = True
            current_object = [line]
        elif "End Object" in line:
            in_object = False
            current_object.append(line)
            nodes.append("\n".join(current_object))
        elif in_object:
            current_object.append(line)
    
    return nodes


# Example line: FunctionReference=(MemberParent="/Script/CoreUObject.Class'/Script/Engine.KismetSystemLibrary'",MemberName="PrintString") (for functions)
def get_node_name(node):
    # Get the line below the Begin Object line
    line = node.splitlines()[1]
    
    # Get the name from "MemeberName" part
    name = line.split("MemberName=")[1].split('"')[1]
    return name
    
# Examples: NodePosX=256 NodePosY=16
def get_node_position(node):
    # Find the line that contains: NodePosX
    x, y = None, None
    for line in node.splitlines():
        if "NodePosX" in line:
            x = int(line.split("NodePosX=")[1].split(" ")[0])
        if "NodePosY" in line:
            y = int(line.split("NodePosY=")[1])
    if x is not None and y is not None:
        return (x, y)
    else:
        return None
    
# Example line: CustomProperties Pin (PinId=31AAD83B474E58B65BB505AC29344F6A,PinName="InString",PinToolTip="In String\nString\n\nThe string to log out",PinType.PinCategory="string",PinType.PinSubCategory="",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PinType.bIsUObjectWrapper=False,PinType.bSerializeAsSinglePrecisionFloat=False,DefaultValue="the value",AutogeneratedDefaultValue="Hello",PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)
def get_node_pins(node):
    # Find the line that contains: CustomProperties and output the following: PinName, Direction (may not be there, in that case we'll make it Input), PinType.PinCategory and DefaultValue (may not be there)
    pins = []
    for line in node.splitlines():
        if "CustomProperties Pin" in line:
            pin_name = line.split("PinName=")[1].split('"')[1]
            
            # Direction (Input if not there)
            direction = "Input"         
            if "Direction=" in line.split("DefaultValue=")[0]: # Just in case default value contains the word direction
                direction = line.split("Direction=")[1].split('"')[1]
                if direction == "EGPD_Output":
                    direction = "Output"
            
            # Pin Type
            pin_type = line.split("PinType.PinCategory=")[1].split('"')[1]
            
            # Default Value
            pin_value = ""
            if "DefaultValue" in line:
                default_value_split = line.split("DefaultValue=")
                if len(default_value_split) > 1:
                    pin_value_split = default_value_split[1].split('"')
                    if len(pin_value_split) > 1:
                        pin_value = pin_value_split[1]
            
            pins.append((pin_name, direction, pin_type, pin_value))
    
    return pins  # Return an empty list if no pins are found